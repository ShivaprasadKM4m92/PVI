<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="59">
  <HTTPTask id="590" hostname="10.100.22.228:8081" path="/assets/app/dashboard/dashboard-manifest-341004fa249db2aaf456b8b3f9116380.js" url="http://10.100.22.228:8081/assets/app/dashboard/dashboard-manifest-341004fa249db2aaf456b8b3f9116380.js" ip="10.100.22.228" port="8081" connectionId="41" origin="Primary" frame="1" startDateTime="2020-07-13T17:29:18.060+05:30" startTime="620990781" endTime="620993484">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="Host" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTAuMTAwLjIyLjIyODo4MDgx</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="User-Agent" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgzLjAuNDEwMy4xMTYgU2FmYXJpLzUzNy4zNg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cDovLzEwLjEwMC4yMi4yMjg6ODA4MS8=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>U0VTU0lPTj0xZmVlMTIwMC05NDQxLTQyYzUtYTUxYS1iMjhhZmU4OGVjYjQ7IEF1dGhUeXBlPURhdGFiYXNl</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIC9hc3NldHMvYXBwL2Rhc2hib2FyZC9kYXNoYm9hcmQtbWFuaWZlc3QtMzQxMDA0ZmEyNDlkYjJhYWY0NTZiOGIzZjkxMTYzODAuanMgSFRUUC8xLjENCkhvc3Q6IDEwLjEwMC4yMi4yMjg6ODA4MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgzLjAuNDEwMy4xMTYgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiAqLyoNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjI4OjgwODEvDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj0xZmVlMTIwMC05NDQxLTQyYzUtYTUxYS1iMjhhZmU4OGVjYjQ7IEF1dGhUeXBlPURhdGFiYXNlDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="SESSION" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MWZlZTEyMDAtOTQ0MS00MmM1LWE1MWEtYjI4YWZlODhlY2I0</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="AuthType" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RGF0YWJhc2U=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>99424</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="X-Frame-Options" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>REVOWQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Last-Modified" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RnJpLCAxMCBKdWwgMjAyMCAxMTo1NzozNCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ImFwcC9kYXNoYm9hcmQvZGFzaGJvYXJkLW1hbmlmZXN0LTM0MTAwNGZhMjQ5ZGIyYWFmNDU2YjhiM2Y5MTE2MzgwLmpzIg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>OTk0MjQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAxMyBKdWwgMjAyMCAxMToyNTo1MSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIA0KWC1GcmFtZS1PcHRpb25zOiBERU5ZDQpMYXN0LU1vZGlmaWVkOiBGcmksIDEwIEp1bCAyMDIwIDExOjU3OjM0IEdNVA0KRVRhZzogImFwcC9kYXNoYm9hcmQvZGFzaGJvYXJkLW1hbmlmZXN0LTM0MTAwNGZhMjQ5ZGIyYWFmNDU2YjhiM2Y5MTE2MzgwLmpzIg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDYWNoZS1Db250cm9sOiBwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDANCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vamF2YXNjcmlwdDtjaGFyc2V0PVVURi04DQpDb250ZW50LUxlbmd0aDogOTk0MjQNCkRhdGU6IE1vbiwgMTMgSnVsIDIwMjAgMTE6MjU6NTEgR01UDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="620993484" offset="0" length="16384" />
        <PacketInfo time="620993500" offset="16384" length="16384" />
        <PacketInfo time="620993500" offset="32768" length="16384" />
        <PacketInfo time="620993515" offset="49152" length="16384" />
        <PacketInfo time="620993515" offset="65536" length="16384" />
        <PacketInfo time="620993531" offset="81920" length="16384" />
        <PacketInfo time="620993531" offset="98304" length="1484" />
      </TcpPackets>
    </HTTPResponse>
    <HTTPTask id="601" hostname="10.100.22.228:8081" path="/assets/pv-btn-bg-fe78a517c666e4e5b987b878badafa68.jpg" url="http://10.100.22.228:8081/assets/pv-btn-bg-fe78a517c666e4e5b987b878badafa68.jpg" ip="10.100.22.228" port="8081" connectionId="36" origin="HTML" frame="1" startDateTime="2020-07-13T17:29:18.102+05:30" startTime="620993140" endTime="620993578">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjIyODo4MDgx</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgzLjAuNDEwMy4xMTYgU2FmYXJpLzUzNy4zNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2Uvd2VicCxpbWFnZS9hcG5nLGltYWdlLyosKi8qO3E9MC44</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yMjg6ODA4MS9hc3NldHMvYXBwbGljYXRpb24tMTNhMWRkYWUyNjdiN2I2YTMyZDEyY2ZiMWFjOThlNDMuY3Nz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj0xZmVlMTIwMC05NDQxLTQyYzUtYTUxYS1iMjhhZmU4OGVjYjQ7IEF1dGhUeXBlPURhdGFiYXNl</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9hc3NldHMvcHYtYnRuLWJnLWZlNzhhNTE3YzY2NmU0ZTViOTg3Yjg3OGJhZGFmYTY4LmpwZyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAwLjIyLjIyODo4MDgxDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODMuMC40MTAzLjExNiBTYWZhcmkvNTM3LjM2DQpBY2NlcHQ6IGltYWdlL3dlYnAsaW1hZ2UvYXBuZyxpbWFnZS8qLCovKjtxPTAuOA0KUmVmZXJlcjogaHR0cDovLzEwLjEwMC4yMi4yMjg6ODA4MS9hc3NldHMvYXBwbGljYXRpb24tMTNhMWRkYWUyNjdiN2I2YTMyZDEyY2ZiMWFjOThlNDMuY3NzDQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjkNCkNvb2tpZTogU0VTU0lPTj0xZmVlMTIwMC05NDQxLTQyYzUtYTUxYS1iMjhhZmU4OGVjYjQ7IEF1dGhUeXBlPURhdGFiYXNlDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MWZlZTEyMDAtOTQ0MS00MmM1LWE1MWEtYjI4YWZlODhlY2I0</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="AuthType" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RGF0YWJhc2U=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1708</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="X-Frame-Options" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>REVOWQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxMCBKdWwgMjAyMCAxMTo1ODo1MiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>InB2LWJ0bi1iZy1mZTc4YTUxN2M2NjZlNGU1Yjk4N2I4NzhiYWRhZmE2OC5qcGci</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2UvanBlZztjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTcwOA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxMyBKdWwgMjAyMCAxMToyNTo1MiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KWC1GcmFtZS1PcHRpb25zOiBERU5ZDQpMYXN0LU1vZGlmaWVkOiBGcmksIDEwIEp1bCAyMDIwIDExOjU4OjUyIEdNVA0KRVRhZzogInB2LWJ0bi1iZy1mZTc4YTUxN2M2NjZlNGU1Yjk4N2I4NzhiYWRhZmE2OC5qcGciDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNhY2hlLUNvbnRyb2w6IHB1YmxpYywgbWF4LWFnZT0zMTUzNjAwMA0KQ29udGVudC1UeXBlOiBpbWFnZS9qcGVnO2NoYXJzZXQ9VVRGLTgNCkNvbnRlbnQtTGVuZ3RoOiAxNzA4DQpEYXRlOiBNb24sIDEzIEp1bCAyMDIwIDExOjI1OjUyIEdNVA0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABkAAD/4QN4aHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzEzMiA3OS4xNTkyODQsIDIwMTYvMDQvMTktMTM6MTM6NDAgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ODUwNzNmZDYtYjRhOS00MTVlLTg0OWUtZDI1OTkzNzZlMjQwIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjlFNjZENjk3RTc3RDExRTY4OEEwODU5QjcwQUQwQjE5IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjlFNjZENjk2RTc3RDExRTY4OEEwODU5QjcwQUQwQjE5IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIEluRGVzaWduIENDIDIwMTcgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDoxQzNEMzJFNUU0OTQxMUU2QjAzRDg2RjM4MkYzQTVDRCIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDoxQzNEMzJFNkU0OTQxMUU2QjAzRDg2RjM4MkYzQTVDRCIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/uAA5BZG9iZQBkwAAAAAH/2wCEAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAgICAgICAgICAgMDAwMDAwMDAwMBAQEBAQEBAgEBAgICAQICAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA//AABEIACgAAgMBEQACEQEDEQH/xAGiAAAABgIDAQAAAAAAAAAAAAAHCAYFBAkDCgIBAAsBAAAGAwEBAQAAAAAAAAAAAAYFBAMHAggBCQAKCxAAAgEDBAEDAwIDAwMCBgl1AQIDBBEFEgYhBxMiAAgxFEEyIxUJUUIWYSQzF1JxgRhikSVDobHwJjRyChnB0TUn4VM2gvGSokRUc0VGN0djKFVWVxqywtLi8mSDdJOEZaOzw9PjKThm83UqOTpISUpYWVpnaGlqdnd4eXqFhoeIiYqUlZaXmJmapKWmp6ipqrS1tre4ubrExcbHyMnK1NXW19jZ2uTl5ufo6er09fb3+Pn6EQACAQMCBAQDBQQEBAYGBW0BAgMRBCESBTEGACITQVEHMmEUcQhCgSORFVKhYhYzCbEkwdFDcvAX4YI0JZJTGGNE8aKyJjUZVDZFZCcKc4OTRnTC0uLyVWV1VjeEhaOzw9Pj8ykalKS0xNTk9JWltcXV5fUoR1dmOHaGlqa2xtbm9md3h5ent8fX5/dIWGh4iJiouMjY6Pg5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6vr/2gAMAwEAAhEDEQA/ALJv7xZH/len/wCp83/R/v5qPrty/wB+zf723+frnp4F1/G/7T0F38aX/joP9uf+K+x7/V7+iP2f7HQ2/dY/h/l0Wz/Sdjv9TT/+fOm+v/JHuS9Nt6/yHQ48OP8AhH7OiQ/x+f8A46t+n/Up9P8AVfX6+1v7vHp/Lox+mHp/q/b0Fv3Df0P6bfoP1/p+j6f7x7Ff0sf8Dftf/oDo98M/0/8AnGf83X//2Q==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="620993578" offset="0" length="2013" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="603" hostname="10.100.22.228:8081" path="/assets/section-hd-bg-8eaf77fc4a1a47c48ca4b2e3d5a96340.jpg" url="http://10.100.22.228:8081/assets/section-hd-bg-8eaf77fc4a1a47c48ca4b2e3d5a96340.jpg" ip="10.100.22.228" port="8081" connectionId="40" origin="HTML" frame="1" startDateTime="2020-07-13T17:29:18.124+05:30" startTime="620993140" endTime="620993593">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="Host" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTAuMTAwLjIyLjIyODo4MDgx</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="User-Agent" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgzLjAuNDEwMy4xMTYgU2FmYXJpLzUzNy4zNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2Uvd2VicCxpbWFnZS9hcG5nLGltYWdlLyosKi8qO3E9MC44</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cDovLzEwLjEwMC4yMi4yMjg6ODA4MS9hc3NldHMvYXBwbGljYXRpb24tMTNhMWRkYWUyNjdiN2I2YTMyZDEyY2ZiMWFjOThlNDMuY3Nz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tVVMsZW47cT0wLjk=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>U0VTU0lPTj0xZmVlMTIwMC05NDQxLTQyYzUtYTUxYS1iMjhhZmU4OGVjYjQ7IEF1dGhUeXBlPURhdGFiYXNl</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIC9hc3NldHMvc2VjdGlvbi1oZC1iZy04ZWFmNzdmYzRhMWE0N2M0OGNhNGIyZTNkNWE5NjM0MC5qcGcgSFRUUC8xLjENCkhvc3Q6IDEwLjEwMC4yMi4yMjg6ODA4MQ0KQ29ubmVjdGlvbjoga2VlcC1hbGl2ZQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzgzLjAuNDEwMy4xMTYgU2FmYXJpLzUzNy4zNg0KQWNjZXB0OiBpbWFnZS93ZWJwLGltYWdlL2FwbmcsaW1hZ2UvKiwqLyo7cT0wLjgNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMDAuMjIuMjI4OjgwODEvYXNzZXRzL2FwcGxpY2F0aW9uLTEzYTFkZGFlMjY3YjdiNmEzMmQxMmNmYjFhYzk4ZTQzLmNzcw0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC45DQpDb29raWU6IFNFU1NJT049MWZlZTEyMDAtOTQ0MS00MmM1LWE1MWEtYjI4YWZlODhlY2I0OyBBdXRoVHlwZT1EYXRhYmFzZQ0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="SESSION" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MWZlZTEyMDAtOTQ0MS00MmM1LWE1MWEtYjI4YWZlODhlY2I0</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="AuthType" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>RGF0YWJhc2U=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>1606</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="X-Frame-Options" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>REVOWQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxMCBKdWwgMjAyMCAxMTo1ODo1NCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>InNlY3Rpb24taGQtYmctOGVhZjc3ZmM0YTFhNDdjNDhjYTRiMmUzZDVhOTYzNDAuanBnIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cache-Control" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>cHVibGljLCBtYXgtYWdlPTMxNTM2MDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2UvanBlZztjaGFyc2V0PVVURi04</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTYwNg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW9uLCAxMyBKdWwgMjAyMCAxMToyNTo1MiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIA0KWC1GcmFtZS1PcHRpb25zOiBERU5ZDQpMYXN0LU1vZGlmaWVkOiBGcmksIDEwIEp1bCAyMDIwIDExOjU4OjU0IEdNVA0KRVRhZzogInNlY3Rpb24taGQtYmctOGVhZjc3ZmM0YTFhNDdjNDhjYTRiMmUzZDVhOTYzNDAuanBnIg0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDYWNoZS1Db250cm9sOiBwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDANCkNvbnRlbnQtVHlwZTogaW1hZ2UvanBlZztjaGFyc2V0PVVURi04DQpDb250ZW50LUxlbmd0aDogMTYwNg0KRGF0ZTogTW9uLCAxMyBKdWwgMjAyMCAxMToyNTo1MiBHTVQNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABkAAD/4QN4aHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjYtYzEzMiA3OS4xNTkyODQsIDIwMTYvMDQvMTktMTM6MTM6NDAgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ODUwNzNmZDYtYjRhOS00MTVlLTg0OWUtZDI1OTkzNzZlMjQwIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjgxNjA4RkI0RTZEMjExRTY4OTI2QzAwNTczQ0JGQTQ0IiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjgxNjA4RkIzRTZEMjExRTY4OTI2QzAwNTczQ0JGQTQ0IiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIEluRGVzaWduIENDIDIwMTcgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo1OTBENDIyOUU0OTQxMUU2QTREQ0RDRjE5NjI4RjcyMiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo1OTBENDIyQUU0OTQxMUU2QTREQ0RDRjE5NjI4RjcyMiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/uAA5BZG9iZQBkwAAAAAH/2wCEAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAgICAgICAgICAgMDAwMDAwMDAwMBAQEBAQEBAgEBAgICAQICAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA//AABEIACQAAQMBEQACEQEDEQH/xAGiAAAABgIDAQAAAAAAAAAAAAAHCAYFBAkDCgIBAAsBAAAGAwEBAQAAAAAAAAAAAAYFBAMHAggBCQAKCxAAAgEDBAEDAwIDAwMCBgl1AQIDBBEFEgYhBxMiAAgxFEEyIxUJUUIWYSQzF1JxgRhikSVDobHwJjRyChnB0TUn4VM2gvGSokRUc0VGN0djKFVWVxqywtLi8mSDdJOEZaOzw9PjKThm83UqOTpISUpYWVpnaGlqdnd4eXqFhoeIiYqUlZaXmJmapKWmp6ipqrS1tre4ubrExcbHyMnK1NXW19jZ2uTl5ufo6er09fb3+Pn6EQACAQMCBAQDBQQEBAYGBW0BAgMRBCESBTEGACITQVEHMmEUcQhCgSORFVKhYhYzCbEkwdFDcvAX4YI0JZJTGGNE8aKyJjUZVDZFZCcKc4OTRnTC0uLyVWV1VjeEhaOzw9Pj8ykalKS0xNTk9JWltcXV5fUoR1dmOHaGlqa2xtbm9md3h5ent8fX5/dIWGh4iJiouMjY6Pg5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6vr/2gAMAwEAAhEDEQA/AN8v+NH/AI6j/ko/9G+90PXugY/vF/zdX/kr2/1rovf96f8Aa5P+TvfutVHSG976p13+1/02f+qnuvf8ut9vz6//2Q==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="620993578" offset="0" length="1915" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
</HTTPSnapshot>